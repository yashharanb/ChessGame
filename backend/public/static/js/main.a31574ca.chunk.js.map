{"version":3,"sources":["Queue/Queue.tsx","MainMenu/PlayerMainMenu.tsx","images/playerStats.png","PlayerStatistics.tsx","ServerHooks.tsx","Admin.tsx","logo.png","header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Queue","className","icon","style","marginLeft","PlayerMainMenu","to","PlayerStatistics","useState","Object","setGridApi","setGridColumnApi","stats","opponent","status","timestamp","duration","src","banner","alt","length","width","height","onGridReady","params","api","columnApi","sizeColumnsToFit","domLayout","defaultColDef","resizable","rowData","field","sendIoMessage","conn","eventName","msg","Error","emit","Admin","onError","connectionRef","useRef","thisUser","setThisUser","allUsers","setAllUsers","useEffect","connection","io","connect","on","JSON","parse","error","current","deleteUsers","useCallback","throttle","emails","deletedEmailsSet","Set","allUsersToDelete","filter","user","has","email","some","userToDelete","isAdmin","state","stringify","useMemo","useAdminState","console","log","gridApi","rowSelection","maxWidth","checkboxSelection","onClick","e","selectedNodes","getSelectedNodes","alert","selectedDataEmails","map","node","data","message","Header","href","logo","library","add","faChessKing","faSpinner","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a31574ca.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport '../App.css';\r\nimport 'bootswatch/dist/slate/bootstrap.min.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n// Contains the display for the queue page.\r\n// Uses a spinning icon to display that the user is waiting in the queue.\r\nexport function Queue() {\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"jumbotron brown-border content-container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <p className=\"lead\">\r\n                                        Looking for an available opponent<br />\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <FontAwesomeIcon icon=\"spinner\" className=\"fa-pulse fa-3x\" style={{ marginLeft: 15 }} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { render, screen } from '@testing-library/react';\r\nimport App from '../App';\r\nimport { PlayerStatistics } from \"../PlayerStatistics\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\n// This page displays the player's general game stats, and allows users to play a new game or view detailed stats.\r\n// TODO: replace the 4s with actual data from the db\r\nexport function PlayerMainMenu() {\r\n\r\n    return (\r\n        <div className=\"container player_menu\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <div className=\"jumbotron brown-border content-container\">\r\n                        <p className=\"lead\">\r\n                            <FontAwesomeIcon icon=\"chess-king\" className=\"chess-king fa-3x\"  style={{marginLeft: 15}}/>\r\n                            Games played: {4}\r\n                        </p>\r\n                        <p className=\"lead\">\r\n                            <FontAwesomeIcon icon=\"chess-king\" className=\"chess-king fa-3x\"/>\r\n                            Games won: {4}\r\n                        </p>\r\n                        <p className=\"lead\">\r\n                            <FontAwesomeIcon icon=\"chess-king\" className=\"chess-king fa-3x\"/>\r\n                            Games lost: {4}\r\n                        </p>\r\n                        <p className=\"lead\">\r\n                            <FontAwesomeIcon icon=\"chess-king\" className=\"chess-king fa-3x\"/>\r\n                            Games tied: {4}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <Link className=\"btn btn-secondary\" to=\"../Game\">New Game</Link>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <Link className=\"btn btn-secondary\" to=\"../PlayerStatistics\">Player Stats</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/playerStats.92a31c20.png\";","import React, { useState } from 'react';\r\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport banner from './images/playerStats.png';\r\n\r\nexport function PlayerStatistics() {\r\n    const [gridApi, setGridApi] = useState(Object);\r\n    const [gridColumnApi, setGridColumnApi] = useState(Object);\r\n\r\n    function onGridReady(params: { api: any; columnApi: any; }) {\r\n        setGridApi(params.api);\r\n        setGridColumnApi(params.columnApi);\r\n        params.api.sizeColumnsToFit();\r\n    }\r\n\r\n    const stats = [\r\n        { opponent: \"Player 1\", status: \"Won\", timestamp: \"11/19/2020 18:47\", duration: \"18:42\" },\r\n        { opponent: \"Player 2\", status: \"Lost\", timestamp: \"11/12/2020 17:26\", duration: \"11:59\" },\r\n        { opponent: \"Player 3\", status: \"Draw\", timestamp: \"11/09/2020 16:35\", duration: \"6:34\" },\r\n        { opponent: \"Player 4\", status: \"Won\", timestamp: \"11/08/2020 15:44\", duration: \"9:27\" },\r\n    ];\r\n\r\n    return (\r\n        <div className=\"stats\">\r\n            <img src={banner} className=\"img-fluid banner\" alt=\"Statistics\" />\r\n            <div className=\"total_games\"><FontAwesomeIcon icon=\"chess-king\" className=\"chess-king fa-3x\" />Games Played: {stats.length}</div>\r\n\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <div className=\"stats_grid ag-theme-alpine\" style={{ width: '100%', height: '100%' }}>\r\n                            <AgGridReact onGridReady={onGridReady} domLayout={'autoHeight'} defaultColDef={{ resizable: true }} rowData={stats}>\r\n                                <AgGridColumn field=\"opponent\"></AgGridColumn>\r\n                                <AgGridColumn field=\"status\"></AgGridColumn>\r\n                                <AgGridColumn field=\"timestamp\"></AgGridColumn>\r\n                                <AgGridColumn field=\"duration\"></AgGridColumn>\r\n                            </AgGridReact>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row mt-4\">\r\n                    <div className=\"col\">\r\n                        <Link className=\"btn btn-secondary\" to=\"./menu\">Main Menu</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {useCallback, useEffect, useMemo, useRef, useState} from \"react\";\r\nimport {io, Socket} from \"socket.io-client\";\r\nimport {throttle} from \"lodash\"\r\n/***\r\n * A single user in the application. Both admins and non-admins are represented by this type.\r\n */\r\nexport interface User{\r\n    /**\r\n     * What state that particular user is in.\r\n     * none means that the user is not in a game, nor is in queue for a game.\r\n     * queued means that the user is queued for a game, waiting to be matched up with an opponent.\r\n     * game means the user is currently in a game.\r\n     * deleted means the user has been deleted by an administrator.\r\n     */\r\n    state:\"none\"|\"queued\"|\"game\"|\"deleted\";\r\n    username:string;\r\n    email:string;\r\n    isAdmin:boolean;\r\n    /**\r\n     * A number representing the ELO rating of the player. this is a chess metric for the skill of a player\r\n     * @see {@link https://en.wikipedia.org/wiki/Elo_rating_system }\r\n     */\r\n    elo:number;\r\n}\r\n\r\nexport interface AdminHookReturn{\r\n    /**\r\n     * The state of the admin user itself.\r\n     * Ie admins username, state,etc.\r\n     */\r\n    thisUser:User|null;\r\n\r\n    /**\r\n     * every User, not including the deleted users.\r\n     */\r\n    allUsers:User[];\r\n\r\n    /**\r\n     * A function to call to delete multiple users.\r\n     * @param emails - The email of every user you want to delete.\r\n     */\r\n    deleteUsers:(emails:string[])=>void;\r\n}\r\n\r\n/**\r\n * A function which is called when there is an error. Displays an error message to user.\r\n */\r\nexport type ErrorFunc=(error:Error)=>void;\r\n\r\n\r\nfunction sendIoMessage(conn:Socket|null,eventName:string,msg:string){\r\n    if(conn===null){\r\n        throw new Error(\"error, no connection to server\");\r\n    }\r\n    else{\r\n        conn.emit(eventName,msg);\r\n    }\r\n}\r\n\r\n/**\r\n * A hook for the admin to connect to socket.io. I would expect this to only be used by the admin page.\r\n *\r\n * @param onError - a function to be called whenever there is an error on the server.\r\n */\r\nexport function useAdminState(onError:ErrorFunc):AdminHookReturn{\r\n    const connectionRef=useRef<Socket|null>(null);\r\n\r\n    const [thisUser, setThisUser]=useState<User|null>(null);\r\n    const [allUsers, setAllUsers]=useState<User[]>([]);\r\n    useEffect(()=>{\r\n        const connection=io().connect();\r\n        connection.on(\"user\",(msg:string)=>setThisUser(JSON.parse(msg)));\r\n        connection.on(\"users\",(msg:string)=>setAllUsers(JSON.parse(msg)));\r\n        connection.on(\"input_error\",(error:string)=>onError(new Error(error)))\r\n        connectionRef.current=connection;\r\n    },[onError])\r\n\r\n    const deleteUsers=useCallback(throttle((emails:string[])=> {\r\n        const deletedEmailsSet=new Set(emails);\r\n        const allUsersToDelete=allUsers.filter(user=>deletedEmailsSet.has(user.email));\r\n\r\n        if(allUsersToDelete.length!==emails.length){\r\n            throw new Error(\"The email address you selected does not belong to a registered user.\");\r\n        }\r\n        else if(allUsersToDelete.some(userToDelete=>userToDelete.isAdmin)){\r\n            throw new Error(\"You can't delete an admin user.\");\r\n        }\r\n        else if (allUsersToDelete.some(userToDelete=>userToDelete.state!==\"none\")){\r\n            throw new Error(\"You can't delete users who are currently queued or playing a game.\");\r\n        }\r\n        else{\r\n            sendIoMessage(connectionRef.current,\"delete_users\",JSON.stringify(emails))\r\n        }\r\n    },2000),[allUsers]);\r\n\r\n    const allUsersWithoutDeleted=useMemo(()=>allUsers.filter(user=>user.state!==\"deleted\"), [allUsers])\r\n\r\n    return {thisUser,allUsers:allUsersWithoutDeleted,deleteUsers}\r\n}\r\nexport interface GameWinLossState{\r\n    gameOverState:\"winLoss\";\r\n    reason:\"checkmate\"|\"timeout\"|\"forfeit\";\r\n    winner:\"white\"|\"black\";\r\n}\r\n\r\nexport interface GameDraw{\r\n    gameOverState:\"draw\";\r\n    reason:\"50-move\"|\"insufficient-material\"|\"stalemate\"|\"threefold-repetition\";\r\n    winner:null;\r\n}\r\n\r\nexport type ChessCoordinate=`${'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'}${'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'}`;\r\n/**\r\n * String reperesenting a chess peice.\r\n *\r\n * p=pawn\r\n * q=queen\r\n * r=rook\r\n * n=knight\r\n * k=knight again for some reason. Its usually n but theres the odd time where it uses k for some reason.\r\n * b=bishop\r\n */\r\nexport type ChessPiece='p'|'q'|'r'|'n'|'k'|'b';\r\n\r\n/**\r\n * The possible moves that the user could do on the board.\r\n *\r\n * This is gotten from chess.js.\r\n *\r\n *\r\n * @see {@link https://github.com/jhlywa/chess.js} for more details on the verbose moves returned. They are gotten from the history and the move() methods.\r\n */\r\nexport interface ChessMove{\r\n    \"color\":\"w\"|\"b\",\r\n    \"from\":ChessCoordinate,\r\n    \"to\":ChessCoordinate,\r\n    /**\r\n     * The flags field in verbose mode may contain one or more of the following values:\r\n     *\r\n     * 'n' - a non-capture\r\n     * 'b' - a pawn push of two squares\r\n     * 'e' - an en passant capture\r\n     * 'c' - a standard capture\r\n     * 'p' - a promotion\r\n     * 'k' - kingside castling\r\n     * 'q' - queenside castling\r\n     * 'pc' - A pawn captured a piece on the 8th rank and promoted.\r\n     */\r\n    \"flags\":'n'|'b'|'e'|'c'|'p'|'k'|'q'|'pc'|'cp',\r\n    \"captured\"?:ChessPiece,\r\n    \"promotion\"?:ChessPiece,\r\n    \"piece\":ChessPiece,\r\n    /** move in Standard Algebraic Notation */\r\n    \"san\":string\r\n}\r\n\r\nexport interface GameState{\r\n    whiteRemainingTimeMs:number;\r\n    blackRemainingTimeMs:number;\r\n    playerTurn:\"white\"|\"black\";\r\n    whitePlayer:User;\r\n    blackPlayer:User;\r\n    possibleMoves:ChessMove[];\r\n    fenString:string;\r\n    inCheck:boolean;\r\n    winLoss:GameWinLossState|GameDraw|null;\r\n    history:ChessMove[];\r\n    /**The time that the white player had, after HE/SHE LAST MADE A MOVE!*/\r\n    whitePlayerLastMoveTime:string;\r\n    /**The time that the black player had, after HE/SHE LAST MADE A MOVE!*/\r\n    blackPlayerLastMoveTime:string;\r\n}\r\n\r\n\r\n/**\r\n * Any valid chess move. Simply get the value from chess.jsx for the attributes to, from and piece.\r\n *\r\n * You should be able to get every one of these values directly from chess.jsx, except promotion. I think we need to do some manual code for promoting pawns.\r\n *\r\n * Note that you need to handle upgrading the pawn yourself, before you call the makeMove function.\r\n */\r\nexport interface InputChessMove {\r\n    /** square move is from. Gotten from chess.jsx */\r\n    from: string;\r\n    /** square move is to. Gotten from chess.jsx */\r\n    to: string;\r\n    /** If the move is a pawn moving into the final square, what peice the pawn will be promoted to*/\r\n    promotion?: 'q'|'r'|'n'|'b';\r\n    /** piece the move is moving. Gotten from chess.jsx */\r\n    piece: string;\r\n}\r\n\r\ninterface ChessPlayerHookReturn{\r\n    /**\r\n     * The state of the chess player.\r\n     * Ie users username, state,etc.\r\n     *\r\n     * Is null when initially loading in value.\r\n     */\r\n    thisUser:User|null;\r\n    /** The state of the game the chess player is currently playing. Is null when not playing a game, or when they have finished a game, and they have not re-queued for another.*/\r\n    gameState:GameState|null;\r\n    /**\r\n     * A function to call when the user wants to queue for a game.\r\n     * @param timeLimitMs - the amount of time the played game will have.\r\n     */\r\n    queueForGame:(timeLimitMs:number)=>void;\r\n\r\n    /**\r\n     * A function to call when the user makes a move in the game they are in.\r\n     * Will throw an error if it is called when not in a game\r\n     *\r\n     *\r\n     * Note, in the case you are promoting a pawn, you need to state what you are promoting it to before you call this function.\r\n     *\r\n     */\r\n    makeMove:(move:InputChessMove)=>void\r\n\r\n}\r\n\r\nfunction isPlayersTurn(game:GameState,user:User):boolean{\r\n    const isPlayerWhite=user.email === game.whitePlayer.email;\r\n    const isMovingPlayerWhite=game.playerTurn===\"white\";\r\n    return (!isPlayerWhite&&!isMovingPlayerWhite )||(isPlayerWhite&&isMovingPlayerWhite)\r\n}\r\n\r\n/**\r\n * A hook for a regular user to connect to socket.io. It manages all socket.io state for you.\r\n *\r\n * @param onError - a function to be called whenever there is an error on the server.\r\n */\r\nexport function useChessPlayerState(onError:ErrorFunc):ChessPlayerHookReturn{\r\n    const [thisUser,setThisUser]=useState<User|null>({username:\"kevin\",elo:2390,email:\"kevin@kevin.com\",isAdmin:false,state:\"none\"})\r\n    const [gameState,setGameState]=useState<GameState|null>(null);\r\n    // const connectionRef=useRef<any>(null);\r\n    const connectionRef=useRef<Socket|null>(null);\r\n\r\n    useEffect(()=>{\r\n        const connection=io().connect();\r\n        connection.on(\"user\",(msg:string)=>setThisUser(JSON.parse(msg)));\r\n        connection.on(\"game\",(msg:string)=>setGameState(JSON.parse(msg)));\r\n        connection.on(\"input_error\",(error:string)=>onError(new Error(error)))\r\n        connectionRef.current=connection;\r\n    },[onError])\r\n\r\n\r\n\r\n    const queueForGame=useCallback(throttle((timeLimit:number)=>{\r\n        if(thisUser!==null){\r\n            setGameState(null);\r\n            sendIoMessage(connectionRef.current,\"play_game\",timeLimit.toString());\r\n        }\r\n    },2000),[thisUser]);\r\n\r\n    const makeMove=useCallback(throttle((move:InputChessMove)=>{\r\n            if(gameState===null){\r\n                throw new Error(\"error, cannot make move when no game.\")\r\n            }\r\n            else if(thisUser === null){\r\n                throw new Error(\"invalid user\");\r\n            }\r\n            else if (thisUser.state!==\"game\"){\r\n                throw new Error(\"must be playing game\");\r\n            }\r\n            else if(move.to.endsWith(\"8\")||move.to.endsWith(\"1\")){\r\n                if(move.piece.toUpperCase().endsWith(\"P\")&&typeof move.promotion===\"undefined\"){\r\n                    throw new Error(\"error, the developer forgot to promote a pawn, before calling makeMove\");\r\n                }\r\n            }\r\n            else if(!isPlayersTurn(gameState,thisUser)){\r\n                throw new Error(\"not your turn!\");\r\n            }\r\n            else{\r\n                sendIoMessage(connectionRef.current,\"make_move\",JSON.stringify(move));\r\n            }\r\n    },2000),[gameState, thisUser]);\r\n\r\n    if(thisUser!==null&&gameState!==null&&thisUser.state===\"game\"&&!isPlayersTurn(gameState,thisUser)){\r\n        const gameStateWithNoMoves:GameState={...gameState,possibleMoves:[]};\r\n        return {gameState:gameStateWithNoMoves,thisUser,makeMove,queueForGame};\r\n    }\r\n    return {gameState,thisUser,makeMove,queueForGame};\r\n}","import React, { useState } from \"react\";\r\nimport './App.css';\r\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport { useAdminState } from \"./ServerHooks\";\r\n\r\nexport function Admin() {\r\n    const {deleteUsers, allUsers, thisUser} = useAdminState(console.log);\r\n\r\n    const [gridApi, setGridApi] = useState(Object);\r\n    const [gridColumnApi, setGridColumnApi] = useState(Object);\r\n\r\n    function onGridReady(params: { api: any; columnApi: any; }) {\r\n        setGridApi(params.api);\r\n        setGridColumnApi(params.columnApi);\r\n        params.api.sizeColumnsToFit();\r\n    }\r\n\r\n    // When Delete button is clicked\r\n    const onButtonClick = (e: any) => {\r\n        const selectedNodes = gridApi.getSelectedNodes();\r\n        if (selectedNodes.length === 0) {\r\n            alert(\"Please select a user to delete.\");\r\n        }\r\n        else {\r\n            const selectedData = selectedNodes.map((node: { data: any; }) => node.data);\r\n            const selectedDataEmails = selectedData.map((node: { email: string; }) => node.email);\r\n            try {\r\n                deleteUsers(selectedDataEmails);\r\n            } catch(e){\r\n                alert(e.message);\r\n            }\r\n        }\r\n    }   \r\n\r\n    return (\r\n        <div className=\"admin\">\r\n            <div className=\"table_heading\">Delete Accounts</div>\r\n\r\n            <div className=\"ag-theme-alpine\" style={{ width: '100%', height: '100%' }}>\r\n                <AgGridReact onGridReady={onGridReady} domLayout={'autoHeight'} defaultColDef={{ resizable: true }} rowData={allUsers} rowSelection=\"multiple\">\r\n                    <AgGridColumn field=\"delete\" maxWidth={150} checkboxSelection={true}></AgGridColumn>\r\n                    <AgGridColumn field=\"username\" maxWidth={300}></AgGridColumn>\r\n                    <AgGridColumn field=\"email\"></AgGridColumn>\r\n                </AgGridReact>\r\n            </div>\r\n\r\n            <div className=\"user_count\">Total Users: {allUsers.length}</div>\r\n            <button className=\"btn btn-secondary\" onClick={onButtonClick}>Delete</button>\r\n\r\n        </div>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/logo.d89d36b0.png\";","import 'bootswatch/dist/slate/bootstrap.min.css';\r\nimport React from 'react';\r\nimport logo from './logo.png';\r\nimport { Router, Route, Link } from 'react-router-dom';\r\n\r\nexport function Header() {\r\n  return (\r\n    <nav className=\"navbar navbar-inverse p-3\">\r\n      <div className=\"container-fluid header-container\">\r\n        <div className=\"navbar-header\">\r\n          <a className=\"navbar-brand site-logo\" href=\"#\">\r\n            <img src={logo} className=\"img-responsive\"></img>\r\n          </a>\r\n        </div>\r\n\r\n        <ul className=\"nav navbar-nav navbar-right d-inline-block\">\r\n          <li className=\"navbar-text navbar-right d-inline-block\">\r\n            Name   |\r\n          </li>\r\n\r\n          <li className=\"active d-inline-block\">\r\n            <Link className=\"btn btn-outline-light btn-logout d-inline-block\" to=\"./\">Logout</Link>\r\n          </li>\r\n\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n\r\n  );\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport './App.css';\r\nimport 'bootswatch/dist/slate/bootstrap.min.css';\r\n\r\nimport { LoginPage } from './login/login';\r\nimport { Queue } from './Queue/Queue';\r\nimport { RegisterPage } from './login/registration';\r\nimport { PlayerMainMenu } from './MainMenu/PlayerMainMenu';\r\nimport { PlayerStatistics } from \"./PlayerStatistics\";\r\nimport { Admin } from './Admin';\r\nimport { Header } from './header';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faChessKing, faSpinner } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  withRouter\r\n} from \"react-router-dom\";\r\n\r\n// This allows Font Awesome icons to be called anywhere within the application.\r\n// To use an icon: add the icon name you want to this and in the import line, use a FontAwesomeIcon tag, and set the icon attribute to the font awesome name.\r\n// e.g. see Queue.tsx\r\nlibrary.add(faChessKing, faSpinner);\r\n\r\n\r\nfunction App() {\r\n  // Switch is required when setting up routes, which allows the app to correctly navigate through different pages.\r\n  // Routes specify which component to display\r\n  // Fragment allows only certain pages to have a header component displayed.\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          {/*<Route path='/' exact component={LoginPage} />*/}\r\n          {/*<Route path=\"/registration\" component={RegisterPage} />*/}\r\n          <Fragment>\r\n            <Header />\r\n            <div>\r\n              <div className=\"App d-flex justify-content-center h-100 align-middle\">\r\n                <Route path='/' component={PlayerMainMenu} />\r\n                <Route path='/queue' component={Queue} />\r\n                <Route path='/playerstats' component={PlayerStatistics} />\r\n                <Route path='/admin' component={Admin} />\r\n              </div>\r\n            </div>\r\n          </Fragment>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}